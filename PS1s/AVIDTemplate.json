{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "workstationName": {
        "type": "string",
        "minLength": 3,
        "maxLength": 8,
        "metadata": {
          "description": "Workstation name must be 3-char min, 8-char max, lowercase alphanumeric"
        }
      },
      "adminUsername": {
        "type": "string",
        "defaultValue": "azureuser",
        "minLength": 4,
        "metadata": {
          "description": "Name of the Admin user for workstation"
        }
      },
      "adminPassword": {
        "type": "securestring",
        "minLength": 12,
        "maxLength": 72,
        "metadata": {
          "description": "Passwords must be between 12 and 72 characters and have 3 of the following: 1 lower case, 1 upper case, 1 number, and 1 special character"
        }
      }
    },
    "variables": {
      "location": "[resourceGroup().location]",
      "createVirtualNetwork": true,
      "uniqueName": "[parameters('workstationName')]",
      "vmSize": "Standard_NV12",
      "adminUsername": "[parameters('adminUsername')]",
      "adminPassword": "[parameters('adminPassword')]",
      "virtualNetworkResourceGroup": "[resourceGroup().name]",
      "virtualNetworkName": "vn-AvidMediaComposer",
      "virtualNetworkSubnetName": "default",
      "vnetAddressSpacePrefix": "10.0.0.0/16",
      "subnetAddressRangePrefix": "10.0.0.0/24",
      "vnetID": "[resourceId(variables('virtualNetworkResourceGroup'),'Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
      "subnetId": "[resourceId(variables('virtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('virtualNetworkSubnetName'))]",
      "mediaComposerURL": "http://cdn.avid.com/Media_Composer/2018.12/EAC93756/Media_Composer_2018.12_Win.zip",
      "teradiciURL": "https://downloads.teradici.com/win/stable/PCoIP_agent_release_installer_2.11.0.9616_graphics.exe",
      "nvidiaURL": "https://go.microsoft.com/fwlink/?linkid=874181",
      "teradiciKey": "BD8RGL3WLN0Z@2E14-1017-AE71-80FA",
      "nicName": "[concat('vmnic-',variables('uniqueName'))]",
      "publicIPAddressName": "[concat('publicip-',variables('uniqueName'))]",
      "vmName": "[concat('vm-',variables('uniqueName'))]",
      "createNic?": true,
      "imageReference": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2016-Datacenter",
        "version": "latest"
      },
      "diskSizeGB": 2048,
      "storageAccountType": "Standard_LRS",
      "dataDisksCount": 1,
      "networkSecurityGroupName": "[concat(variables('uniqueName'),'-nsg')]",
      "nsgId": "[resourceId(resourceGroup().name, 'Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]",
      "networkSecurityGroupRules": [
        {
          "name": "RDP",
          "properties": {
            "priority": 300,
            "protocol": "TCP",
            "access": "Allow",
            "direction": "Inbound",
            "sourceAddressPrefix": "*",
            "sourcePortRange": "*",
            "destinationAddressPrefix": "*",
            "destinationPortRange": "3389"
          }
        },
        {
          "name": "PCoIPtcp",
          "properties": {
            "priority": 301,
            "protocol": "TCP",
            "access": "Allow",
            "direction": "Inbound",
            "sourceAddressPrefix": "*",
            "sourcePortRange": "*",
            "destinationAddressPrefix": "*",
            "destinationPortRange": "4172"
          }
        },
        {
          "name": "PCoIPudp",
          "properties": {
            "priority": 302,
            "protocol": "UDP",
            "access": "Allow",
            "direction": "Inbound",
            "sourceAddressPrefix": "*",
            "sourcePortRange": "*",
            "destinationAddressPrefix": "*",
            "destinationPortRange": "4172"
          }
        },
        {
          "name": "certauthhttp",
          "properties": {
            "priority": 303,
            "protocol": "TCP",
            "access": "Allow",
            "direction": "Inbound",
            "sourceAddressPrefix": "*",
            "sourcePortRange": "*",
            "destinationAddressPrefix": "*",
            "destinationPortRange": "80"
          }
        },
        {
          "name": "certauthhttps",
          "properties": {
            "priority": 304,
            "protocol": "TCP",
            "access": "Allow",
            "direction": "Inbound",
            "sourceAddressPrefix": "*",
            "sourcePortRange": "*",
            "destinationAddressPrefix": "*",
            "destinationPortRange": "443"
          }
        },
        {
          "name": "Teradici",
          "properties": {
            "priority": 305,
            "protocol": "TCP",
            "access": "Allow",
            "direction": "Inbound",
            "sourceAddressPrefix": "*",
            "sourcePortRange": "*",
            "destinationAddressPrefix": "*",
            "destinationPortRange": "60443"
          }
        }
  
      ],
      "singleQuote": "'",
      "windowsCustomScriptArguments": "[concat('$arguments = ',variables('singleQuote'),'-MediaComposerURL ',variables('mediaComposerURL'),' -TeradiciURL ',variables('teradiciURL'),' -NvidiaURL ',variables('nvidiaURL'),' -TeradiciKey ',variables('teradiciKey'),variables('singleQuote'), ' ; ')]",
      "windowsCustomScriptSuffix": " $inputFile = '%SYSTEMDRIVE%\\AzureData\\CustomData.bin' ; $outputFile = '%SYSTEMDRIVE%\\AzureData\\CustomDataSetupScript.ps1' ; $inputStream = New-Object System.IO.FileStream $inputFile, ([IO.FileMode]::Open), ([IO.FileAccess]::Read), ([IO.FileShare]::Read) ; $sr = New-Object System.IO.StreamReader(New-Object System.IO.Compression.GZipStream($inputStream, [System.IO.Compression.CompressionMode]::Decompress)) ; $sr.ReadToEnd() | Out-File($outputFile) ; Invoke-Expression('{0} {1}' -f $outputFile, $arguments) ; ",
      "windowsCustomScript": "[concat('powershell.exe -ExecutionPolicy Unrestricted -command \"', variables('windowsCustomScriptArguments'), variables('windowsCustomScriptSuffix'), '\"')]"
    },
    "resources": [
      {
        "apiVersion": "2018-02-01",
        "name": "pid-bc1e25ec-4990-4a2d-a035-a332bebc3ded",
        "type": "Microsoft.Resources/deployments",
        "properties": {
          "mode": "Incremental",
          "template": {
            "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
            "contentVersion": "1.0.0.0",
            "resources": []
          }
        }
      },
      {
        "apiVersion": "2017-10-01",
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[variables('publicIPAddressName')]",
        "location": "[variables('location')]",
        "properties": {
          "publicIPAllocationMethod": "Static"
        }
      },
      {
        "name": "[variables('networkSecurityGroupName')]",
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "2018-08-01",
        "location": "[variables('location')]",
        "properties": {
          "securityRules": "[variables('networkSecurityGroupRules')]"
        },
        "tags": {}
      },
      {
        "condition": "[variables('createVirtualNetwork')]",
        "apiVersion": "2017-10-01",
        "type": "Microsoft.Network/virtualNetworks",
        "name": "[variables('virtualNetworkName')]",
        "location": "[variables('location')]",
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "[variables('vnetAddressSpacePrefix')]"
            ]
          },
          "subnets": [
            {
              "name": "[variables('virtualNetworkSubnetName')]",
              "properties": {
                "addressPrefix": "[variables('subnetAddressRangePrefix')]"
              }
            }
          ]
        }
      },
      {
        "apiVersion": "2017-10-01",
        "condition": "[variables('createNic?')]",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[variables('nicName')]",
        "location": "[variables('location')]",
        "dependsOn": [
          "[concat('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]",
          "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
          "[concat('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
                },
                "subnet": {
                  "id": "[variables('subnetId')]"
                }
              }
            }
          ],
          "networkSecurityGroup": {
            "id": "[variables('nsgId')]"
          }
        }
      },
      {
        "apiVersion": "2017-12-01",
        "tags": {
          "avid": "mediacomposer"
        },
        "type": "Microsoft.Compute/virtualMachines",
        "name": "[variables('vmName')]",
        "location": "[variables('location')]",
        "dependsOn": [
          "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
        ],
        "properties": {
          "hardwareProfile": {
            "vmSize": "[variables('vmSize')]"
          },
          "osProfile": {
            "computername": "[variables('vmName')]",
            "adminUsername": "[variables('adminUsername')]",
            "adminPassword": "[variables('adminPassword')]",
            "customData": "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",
            "windowsConfiguration": {
              "provisionVmAgent": "true"
            }
          },
          "storageProfile": {
            "imageReference": "[variables('imageReference')]",
            "copy": [
              {
                "name": "dataDisks",
                "count": "[variables('dataDisksCount')]",
                "input": {
                  "name": "[concat(variables('vmName'),'DataDisk',copyIndex('dataDisks'))]",
                  "diskSizeGB": "[variables('diskSizeGB')]",
                  "lun": "[copyIndex('dataDisks')]",
                  "createOption": "Empty",
                  "managedDisk": {
                    "storageAccountType": "[variables('storageAccountType')]"
                  }
                }
              }
            ]
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
              }
            ]
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "[concat(variables('vmName'),'/create.avid.mediacomposer.v0.1.0')]",
        "apiVersion": "2017-12-01",
        "location": "[variables('location')]",
        "dependsOn": [
          "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
        ],
        "properties": {
          "publisher": "Microsoft.Compute",
          "type": "CustomScriptExtension",
          "typeHandlerVersion": "1.9",
          "settings": {
            "commandToExecute": "[concat(variables('windowsCustomScript'),' > %SYSTEMDRIVE%\\AzureData\\CustomDataSetupScript.log 2>&1')]"
          }
        }
      }
    ],
    "outputs": {
      "resource_group": {
        "type": "string",
        "value": "[resourceGroup().name]"
      },
      "location": {
        "type": "string",
        "value": "[variables('location')]"
      },
      "public_ip_address": {
        "type": "string",
        "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))).ipAddress]"
      },
      "network_resource_group": {
        "type": "string",
        "value": "[variables('virtualNetworkResourceGroup')]"
      },
      "network": {
        "type": "string",
        "value": "[variables('virtualNetworkName')]"
      },
      "subnet": {
        "type": "string",
        "value": "[variables('virtualNetworkSubnetName')]"
      },
      "subnet_id": {
        "type": "string",
        "value": "[variables('subnetId')]"
      }
    }
  }